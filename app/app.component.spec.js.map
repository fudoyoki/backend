{"version":3,"sources":["app/app.component.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;YAiBA,8BAA8B;YAE9B,eAAe;YACf,kBAAQ,CAAC,YAAY,EAAE;gBACrB,YAAE,CAAC,2BAA2B,EAAE;oBAC9B,gBAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,kBAAQ,CAAC,uBAAuB,EAAE;gBAChC,YAAE,CAAC,8BAA8B,EAAE;oBACjC,gBAAM,CAAC,IAAI,4BAAY,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBACrD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,kBAAQ,CAAC,uBAAuB,EAAE;gBAEhC,YAAE,CAAC,8BAA8B,EAC/B,eAAK,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;oBAE/D,GAAG,CAAC,WAAW,CAAC,4BAAY,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;wBACxC,gBAAM,CAAC,OAAO,CAAC,iBAAiB,YAAY,4BAAY,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,4BAA4B,CAAC,CAAC;oBACrG,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEL,YAAE,CAAC,gCAAgC,EACjC,eAAK,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;oBAE7D,GAAG,CAAC,WAAW,CAAC,4BAAY,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;wBAC1C,2FAA2F;wBAE3F,IAAI,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,KAAK,IAAI,EAAhB,CAAgB,CAAC,CAAC,aAAa,CAAC,CAAE,WAAW;wBAEnF,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,CAAC,CAAY,YAAY;wBAExF,gBAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,iDAAiD,CAAC,CAAC;oBACpG,CAAC,CAAC,CAAC;gBAEL,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC","file":"app/app.component.spec.js","sourcesContent":["/* tslint:disable:no-unused-variable */\nimport { AppComponent } from './app.component';\n\nimport {\n  expect, it, iit, xit,\n  describe, ddescribe, xdescribe,\n  beforeEach, beforeEachProviders, withProviders,\n  async, inject\n} from '@angular/core/testing';\n\nimport { TestComponentBuilder } from '@angular/compiler/testing';\n\nimport { By }             from '@angular/platform-browser';\nimport { provide }        from '@angular/core';\nimport { ViewMetadata }   from '@angular/core';\nimport { PromiseWrapper } from '@angular/core/src/facade/promise';\n\n////////  SPECS  /////////////\n\n/// Delete this\ndescribe('Smoke test', () => {\n  it('should run a passing test', () => {\n    expect(true).toEqual(true, 'should pass');\n  });\n});\n\ndescribe('AppComponent with new', function () {\n  it('should instantiate component', () => {\n    expect(new AppComponent()).toBeDefined('Whoopie!');\n  });\n});\n\ndescribe('AppComponent with TCB', function () {\n\n  it('should instantiate component',\n    async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n\n    tcb.createAsync(AppComponent).then(fixture => {\n      expect(fixture.componentInstance instanceof AppComponent).toBe(true, 'should create AppComponent');\n    });\n  })));\n\n  it('should have expected <h1> text',\n    async(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n\n      tcb.createAsync(AppComponent).then(fixture => {\n      // fixture.detectChanges();  // would need to resolve a binding but we don't have a binding\n\n      let h1 = fixture.debugElement.query(el => el.name === 'h1').nativeElement;  // it works\n\n          h1 = fixture.debugElement.query(By.css('h1')).nativeElement;            // preferred\n\n      expect(h1.innerText).toMatch(/angular 2 app/i, '<h1> should say something about \"Angular 2 App\"');\n    });\n\n  })));\n});\n"],"sourceRoot":"/source/"}